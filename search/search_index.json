{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CCBL Tutorials!","text":"<p>This website was designed by the Computational Chemical Biology Lab at FCFRP-USP to help it's students get familiarized with the fundamentals of computational language.</p> <p>The main sections are:</p> <ul> <li>Introduction to Linux</li> <li>Git</li> <li>SSH</li> <li>IDE</li> <li>Kill processes</li> <li>Slurm basics</li> </ul> <p>Each one of these topics are of extreme importance to help garner knowledge so that initiating in the field of bioinformatics is rendered smoothly.</p>"},{"location":"git/","title":"GIT","text":""},{"location":"git/#what-is-git","title":"WHAT IS GIT?","text":"<p>Git was created to help during software development by being a distributed version control system so that tracking code modifications is possible. This makes things easier when collaborating with different groups of people  because noticing where the changes happened is very efficient.</p>"},{"location":"git/#github","title":"GITHUB","text":"<p>Github is a code hosting platform where you can manage your git repositories. It allows you to work on collaborative projects with developers around the world. To start using the plataform, all you have to do is create an account on their website: </p> <ul> <li>https://github.com/</li> </ul>"},{"location":"git/#creating-a-repository","title":"CREATING A REPOSITORY","text":"<p>To begin your project, a repository needs to be created. It can contain folders, files, videos, spreadsheets and data sets. Including a README is also recommended so that when sharing your project with others there is information on what exactly it is about.</p> <p>1. Once you're logged in, click on the button \"New\"</p> <p></p> <p>2. The page below will appear and you will configure the repository the way you prefer by applying a title, a short description and clicking on \"Initialize this repository with a README\" before finishing with \"Create repository\".</p> <p></p>"},{"location":"git/#forking","title":"FORKING","text":"<p>Creating a \u201cfork\u201d is producing a personal copy of someone else\u2019s project.  To fork a repository, access the repository of interest and click on the \"fork\" icon, located in the upper right corner of the page. </p> <p>Done! The repository files are now available in your gihub account. </p> <p>To download the fork files to computer:  1. Access your created fork, click on the green \"Code\" icon and copy the generated link.  2. At the terminal, type: \"git clone \" and a copy of the fork will be available."},{"location":"git/#connecting","title":"CONNECTING","text":"<p>To work in your repository files directly from your terminal, first you must connect your GitHub account, configurating it through the following command:</p> <p><code>git config --global user.email \"you@example.com\"  (Use the email you registered on GitHub)</code></p> <p><code>git config --global user.name \"Your Name\" (The username you chose for your GitHub account)</code></p> <p>After connecting, when pushing your commits to the repository you will simply log in through your GitHub username and password through the terminal!</p>"},{"location":"git/#branching","title":"BRANCHING","text":"<p>Branching is a very useful way to work on different versions of a project at the same time without altering the original version. Once the changes are done, you might want to add these changes to the original and that is possible by pulling in those updates.</p> <p>1. To create a branch is very simple, once you are on the main page of your repository, just click on \"Branch:master\" and fill out the black space with the new name of the branch.</p> <p></p> <p>Another possibility is cloning someone else's repository so that you have the data with you so that changes can be made.</p> <p>1. To do this, enter the repository you wish to clone and click on the button \"Clone or download\". A small window will open and you will copy the url that appears.</p> <p></p> <p>2. Open your terminal and go to the directory that you wish to clone the repository into. Type in git clone and the url you copied above. Press enter and your local clone will be created.</p> <p></p>"},{"location":"git/#make-and-commit-changes","title":"MAKE AND COMMIT CHANGES","text":"<p>Once the files are with you and changes have been made, you might want to commit them and send it to Github. All you have to do is the following:</p> <p>1. Check the status of the repository in relation to what you've changed and what stayed the same by inserting in the terminal \"git status\"</p> <p></p> <p>2. To add all the new changes to get ready to update, type in \"git add\" in the terminal. If you wish all of them to be sent, then type in \"git add docs/*\". Click status again and it will be possible to see that they have all been added as indicated by the color green</p> <p></p> <p>3. You can also compare what has changed and what stayed the same by typing in \"git diff\", as shown below</p> <p></p> <p>4. Preparing to commit is easy, just type in \"git commit -a -m \"description of choice\".</p> <p></p> <p>5. Finish by typing \"git push origin master\"; It will be asked for you to login into your GitHub account.</p> <p></p> <p>Then go to the Github website to submit your changes by clicking on \"Open a pull request\".</p>"},{"location":"git/#open-a-pull-request","title":"OPEN A PULL REQUEST","text":"<p>When you want to submit your edits, you can open a pull request that will propose your changes to the master branch. To open a pull request, you have to follow these steps:</p> <p>1. Navigate to the repository and find the branch menu</p> <p>2. From the branch menu, select the branch that contains your work</p> <p>3. Click \"New pull request\" next to the menu branch</p> <p>4. Enter the title and descripton of the pull request</p> <p>5. Click the \"Create pull request\" button</p> <p>Done! Now your changes will be reviewed by the repository contributors that can accept or deny the request.</p>"},{"location":"git/#references","title":"REFERENCES","text":"<ul> <li>https://guides.github.com/activities/hello-world/</li> </ul>"},{"location":"hcp_aguia4/","title":"How to acess aguia4 cluster","text":""},{"location":"hcp_aguia4/#login-and-acess","title":"Login and Acess:","text":"<pre><code>- SSH: ssh USP_ID@shark.hpc.usp.br\n- Password: USP_ID password\n- shark ssh aguia4\n\n</code></pre>"},{"location":"hcp_aguia4/#utilities","title":"Utilities","text":"<pre><code>- sbatch namejob.sh            : Puts `namejob.sh` in the queue\n- scancel job_id               : Cancels the job\n- squeue --user=nnnn           : Displays the jobs of user `nnnn`\n- scontrol show jobid &lt;jobid&gt;  : Shows information about the job with identification `&lt;jobid&gt;`\n- module avail                 : Lists the installed programs\n</code></pre> <p>For more: slurm workload manager</p> <p>Pay attention!: Don't use your directory for permanent data storage. After transferring your files, remove them from your directory.</p>"},{"location":"hcp_aguia4/#job-template","title":"Job Template","text":"<p>To allow Slurm to allocate more than one job on the same server, use the following job template.</p> <pre><code>#!/bin/bash \n\n#SBATCH --partition=SP2\n#SBATCH --ntasks=1            : Number of tasks / MPI processes\n#SBATCH --cpus-per-task=1      : Number of threads OpenMP per process\n#SBATCH -J aloca-1-cpu\n#SBATCH --time=01:02:00        : In case of you don't specify, the default limit is 8 hours. The maximum limit is 192 hours.\n#SBATCH --mem-per-cpu=24042     :24 GB of RAM per CPU. Maximum of 480,000 for all CPUs.\n\n#### OpenMP Settings:\n\nexport OMP_NUM_THREADS=1\nexport MKL_NUM_THREADS=1\nexport OMP_PLACES=threads\nexport OMP_PROC_BIND=spread\necho $SLURM_JOB_ID        : ID of job allocation\necho $SLURM_SUBMIT_DIR    : Directory job where was submitted\necho $SLURM_JOB_NODELIST  : File containing allocated hostnames\necho $SLURM_NTASKS        : Total number of cores for job\n\n#### Load modules:\nmodule avail : Lists the installed programs\nmodule load NOME_MODULE\n\n#### Run the application:\nsrun YOUR_EXECUTEFILE_WITH_PARAMETERS_AND_FLAGS\n\n</code></pre> <p>Examples: </p> <pre><code>- more modelo_job-gaussian.sh\n- more modelo_job.sh\n</code></pre>"},{"location":"hcp_aguia4/#reminders","title":"Reminders","text":"<p>It is essential to specify the required time in a consistent and appropriate manner</p> <p>If each CPU will use more than 24 GB use in the job header</p> <pre><code>#SBATCH --mem VALUE\n</code></pre> <p>Use</p> <pre><code>srun\n</code></pre> <p>to run the program within the job script submitted by sbatch.</p>"},{"location":"hcp_aguia4/#defining-how-cores-cpus-are-allocated","title":"Defining How Cores (CPUs) Are Allocated","text":"<p>Examples for 16 cores:</p> <pre><code>--ntasks=16 : Using MPI, without worrying about core distribution\nand to allocate 16 independent processes (without communication)\n\n--ntasks=16 --ntasks-per-node=1 or --ntasks=16 --nodes=16 : To allocate 16 cores distributed across different nodes\n\n--ntasks=16 --nodes=16 --exclusive : To allocate 16 cores distributed across different nodes, without interference from other jobs\n\n--ntasks=16 --ntasks-per-node=2 : For 16 processes distributed across 8 nodes (2 processes per node)\n--ntasks=16 --ntasks-per-node=16 : For 16 processes on the same node \n\n--ntasks=1 --cpus-per-task=16 : For 1 process using 16 cores for multithreading\n\n--ntasks=4 --cpus-per-task=4 : For 4 processes using 4 cores each for multithreading \n\n</code></pre>"},{"location":"hcp_aguia4/#chain-jobs","title":"Chain Jobs","text":"<p>You can organize a sequence of jobs so that one job starts after the completion of another. To do this, submit the first job, note the JobId, and then submit the next one with the following command:</p> <pre><code>sbatch submit.sh --dependency=afterany:&lt;JobId&gt;\n</code></pre> <p>In this way, the second job will only start after the completion of the first job.</p>"},{"location":"hcp_aguia4/#rules-and-recommendations","title":"Rules and Recommendations","text":"<ul> <li>The aguia4 cluster supports up to 160 cores for serial and parallel jobs. For parallel jobs requiring more than 160 and up to 900 cores, use the aguia3 cluster.</li> <li>Don't run programs interactively, use the job queue system.</li> <li>Read the file /etc/instrucoes.txt for initial commands and tips on how to run jobs.</li> <li>The job limit per user is 20 jobs.</li> <li>The maximum queue time is 192 hours.</li> <li>The maximum number of CPUs per node is 20.</li> <li>Questions or problems? Send an email to hpc@usp.br.</li> </ul>"},{"location":"ide/","title":"IDE","text":""},{"location":"ide/#what-is-ide","title":"WHAT IS IDE?","text":"<p>An IDE is known as an Integrated Development Environment and has the function of conglomerating different aspects of writing a program such as editing source code, building executables and debugging into a single application.</p> <p>It's useful because it simplifies code development and can minimize coding mistakes and typos. Without an IDE, many developers spend too much time trying to decide which tools should be used for various tasks, configuring the tools and learning how to use them efficiently.</p> <p>Some IDEs are open source, while others are commercial offerings. An IDE can be a standalone application or it can be part of a larger package. Developers must match the IDE they use with the type of application they want to produce.</p> <p>A few examples of IDEs are: PyCharm, NetBeans, IntelliJ Idea and Eclipse.</p>"},{"location":"ide/#editing-source-code","title":"EDITING SOURCE CODE","text":"<ul> <li>SYNTAX HIGHLIGHTING</li> </ul> <p>It is a feature that IDE has that makes reading code much easier because it visually clarifies different elements of language syntax.</p> <ul> <li>AUTOCOMPLETE</li> </ul> <p>When IDE knows in which language you are developing your code, it makes writing much more efficient by anticipating what you are going to type next.</p>"},{"location":"ide/#building-executables","title":"BUILDING EXECUTABLES","text":"<p>The compilation process is necessary for all programs so the IDE provides automated build processes for languages, so the act of compiling and executing code is abstracted away.</p>"},{"location":"ide/#debugging","title":"DEBUGGING","text":"<p>It is nearly impossible to write a program without encountering any errors or bugs. When a program does not run correctly, IDEs provide debugging tools that allow programmers to examine different variables and inspect their code in a deliberate way.</p>"},{"location":"ide/#references","title":"REFERENCES","text":"<ul> <li> <p>https://searchsoftwarequality.techtarget.com/definition/integrated-development-environment</p> </li> <li> <p>https://www.codecademy.com/articles/what-is-an-ide</p> </li> </ul>"},{"location":"linux/","title":"Introduction to Linux","text":""},{"location":"linux/#general-overview","title":"GENERAL OVERVIEW","text":"<p>Linux is an operating system that is very popular amongst the scientific community due to it's clarity and compatibility with other hardwares. All these characteristics, in addition to having many functional tools that make data analysis easier, makes it an ideal system to be used research-wise. It has a very friendly interface that is quite similar to Windows, which allows the user to use it even without any prior knowledge in how terminal commands work. Albeit being so easy-to-use, the major focus here will be in providing a simple introduction on how Linux works, specifically in relation to the fundamentals on how to get simple tasks done, such as creating a file, through the terminal.</p>"},{"location":"linux/#installing","title":"INSTALLING","text":"<p>It is possible to have Linux on your computer as the only operating system or have it work alongside Windows (dual boot).The easiest way to install Linux on your computer is by creating a Live CD (or pen drive) and, in this way, the installation process occurs quite smoothly. There are many tutorials online which describe it step-by-step and a suggestion would be to follow the instructions described by the link below to learn how to create a Live Pen Drive:</p> <ul> <li>https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0</li> </ul> <p>After succesfully creating the Live Pen Drive, you will need to boot it and make the necessary configurations. Switching back to Windows is quite easy by turning off the computer and removing the Pen Drive.</p> <p>Although easy to install, a Live Pen Drive is limited in relation to the amount of space necessary for certain files. This can make it very slow and inefficient. A solution would be to have a visualization software and have Linux work as a virtual machine on Windows. A popular and free software is VirtualBox, which can be found in the link below (be sure to check if the download corresponds to Windows users if that is the case):</p> <ul> <li>https://www.virtualbox.org/wiki/Downloads</li> </ul> <p>If a visualization software is being used, it is necessary to get used to the fact that the host will always be considered your physical computer and the guest, your virtual machine. With this concept in mind, the next step is to install the guest operating system. Once this is done, you are ready to learn the basics of command line in Terminal!</p>"},{"location":"linux/#terminal","title":"TERMINAL","text":"<p>The terminal, also known as the shell, is a program that receives specific codes that are typed out by the users and then directs commands that the computer acts on. Normally just by searching the word \"terminal\" on the computer it's easy to be found.</p> <p>Example of a terminal:</p> <p></p> <p>Once the terminal is open on your computer, various commands can be executed. The table below describes a few of them:</p> Command Description ls Lists arquives cd Changes directory cd .. Return to previous directory touch Creates a new file rm Removes file mkdir Creates a new directory rmdir Removes directory gedit Runs a text editor history &gt; Creates a text containing the code you used on terminal <p>There are many other commands but these are the most basic ones that will help beginners get a head start. A good exercise would be to start by opening terminal and trying out these commands to get a closer look on what each one does.</p>"},{"location":"linux/#examples","title":"Examples","text":"<p>Go to your terminal and repeat the commands</p> <p></p> <p>You can copy and paste the commands from here</p> <pre><code>ls\nrm test/test.txt\nrmdir test/\nls\nmkdir test\nls\ntouch test/test.txt\nls test/\ncd test/\nls\ncd ..\nls\nhistory &gt; test/test.txt\ncat test/test.txt | tail\nls -lh test/\nchmod +x test/test.txt\nls -lh test/\nrm test/test.txt\nls test/\nrmdir test/\nls\n</code></pre>"},{"location":"linux/#understanding-file-permissions","title":"UNDERSTANDING FILE PERMISSIONS","text":"<p>Another important detail when using linux and sharing the computer with others is understanding how to read if you have permission to access certain files. Learning how to establish who has control over the files you have created is just as important. Even if you happen to be the only user of a computer, this is an efficient method to protect your computer from suffering from particular mistakes that might be harmful.</p> <p>File permissions are defined differently by each of the following:</p> <ul> <li> <p>USER: The person that runs the file. The general rule is that whoever created the file is therefore it's user.</p> </li> <li> <p>GROUP: All the users that belong to the same usergroup will have the same type of access permission towards a file. This is useful so that many people can contribute to the same file but configurations have to be made accordingly to make sure it works.</p> </li> <li> <p>OTHER: A person who is neither the owner of the file or participant of the same group the file does.</p> </li> </ul> <p>There are also three types of access permissions on linux:</p> <ul> <li> <p>READ PERMISSION: When talking about a file, it can be open and read. In relation to the directory, it's contents can be listed.</p> </li> <li> <p>WRITE PERMISSION: A file can be altered, that is, new data can be written upon it. Deleting or renaming the file is only possible if you also have permission through the directory as well.</p> </li> <li> <p>EXECUTE PERMISSION: You can run a regular file as a program or a shell script. The execute permission can be opened by the terminal by using the cd command. Although you might have permission to execute the file, you will only be allowed to list it's contents if you have the read permission to the that directory.</p> </li> </ul> <p>To view what type of permissions you have in relation to a particular file, you can run in the terminal the following: -l ls</p> <p>An example of what appears is below:</p> <p></p> <p>Understanding how to read the symbols corresponding to each file is quite simple since each letter corresponds to a different meaning.The first character can be any of these:</p> <ul> <li>d = directory</li> <li>\u2013 = regular file</li> <li>l = symbolic link</li> <li>s = Unix domain socket</li> <li>p = named pipe</li> <li>c = character device file</li> <li>b = block device file</li> </ul> <p>The following nine characters are divided into three groups. That is, the read, write, execute permission for the first three characters corresponds to the user. The second group of three shows the permission for the group and the last three shows for the other. For each group, the first character is the read permission, the second character is ther write permission and the third is execute permission.</p> <p>The characters are the following:</p> <ul> <li>r = read permission</li> <li>w = write permission</li> <li>x = execute permission</li> <li>\u2013 = no permission</li> </ul> <p>Finally, both the creator and the root user can manage set file permissions by using the command chmod. For information on how to do this, access: https://raw.githubusercontent.com/anaclccoelho/ccbl_tutorials/master/docs/linux.md </p>"},{"location":"linux/#references","title":"REFERENCES","text":"<ul> <li> <p>https://www.cenapad.unicamp.br/servicos/treinamentos/linux.shtml </p> </li> <li> <p>https://raw.githubusercontent.com/anaclccoelho/ccbl_tutorials/master/docs/linux.md </p> </li> </ul>"},{"location":"ssh/","title":"SSH","text":""},{"location":"ssh/#what-is-ssh","title":"WHAT IS SSH?","text":"<p>SSH (Secure shell) is a network protocol that gives users, particularly system administrators, a secure way to access a computer over an unsecured network. It provides strong authentication and encrypted data communications between two computers connecting over an open network such as the internet. Administrators normally use it to manage systems and applications remotely. They can log into another computer over a network, execute commands and move files from one computer to the other. If you log in and out of many remote servers on a daily basis, surely it is troubling to remember all the usernames, remote addresses and command lines. Therefore, a SSH configuration file will simplify your life by allowing you to create shell aliases.</p>"},{"location":"ssh/#logging-with-a-password","title":"LOGGING WITH A PASSWORD","text":"<p>Having a username registered in the server you want to access, you can use the following command in the terminal to log in:</p> <p><code>ssh \"UserName@ip\" or ssh \"UserName@SSHserver.example.com\"</code></p> <p>Then it will be asked your password. </p>"},{"location":"ssh/#shell-aliases","title":"SHELL ALIASES","text":"<p>1. After configuring your computer to recognize another server by inserting the ip address, you  have to open your terminal and enter the command \"ssh -p 2222 UserName@SSHserver.example.com\". The password also needs to be inserted after pressing enter. </p> <p>Obs. -p 2222 is an example of an SSH port </p> <p>2. Enter the server again by typing in \"ssh -p 2222 UserName@SSHserver.example.com\" again and enter \"sh-keygen\" to generate the access key.</p> <p>3. Move the file where the key was created to the Desktop being aware of using the correct ip address. Be sure to be in the exact file where the key was generated for this to work. In this case, the key was generated inside the ssh folder and being moved to the Desktop.</p> <p>4. Go back to your host computer and create a config file containing the following information as exampled below:</p> <ul> <li>Host hostName </li> <li>Hostname 127.0.0.1 </li> <li>Port 22</li> <li>User UserName </li> <li>IdentityFile ~/.ssh/id_rsa_server.pub</li> </ul> <p>First, once inside the .ssh/, create the file by typing in \"touch config\", then type in \"nano config\" so that you can insert the information shown above.</p> <p>5. Move the key you saved on the desktop to the ssh./ folder and rename it the same way you named the information exampled in step 5. Which is, in this case, hostName. By typing in \"ls\" afterwards, you can check whether the file is truly there.</p> <p>6. Finally, it is done! You no longer have to type in the full SSH port with the server address to access remotely.</p> <p>7. But now you also want to be able to access it without the need of a password. To do this, enter the server.</p> <p>8. Go to ssh and create the file \"authorized_keys\"</p> <p>9. Meanwhile, open another tab and go to your home server and generate a key by typing in \"ssh-keygen\". Afterwards, type in \"less\" so that you can see the entire key. Then copy the key to the destination server by typing in \"scp id_rsa.pub hostName:/home/ana\", for example.</p> <p>10. Go back to your server (into your home page) and change the name of id_rsa.pub to authorized_keys by typing in \"mv id_rsa.pub authorized_keys\". Move authorized_keys to the ssh file by typing \"mv authorized_keys .ssh\".</p> <p>There! Now you can enter your server without needing the password or typing in the full SSH port with the server address.</p>"},{"location":"zombie/","title":"Kill zombie processes","text":""},{"location":"zombie/#how-to-manage-your-processes-in-linux-terminal","title":"How to manage your processes in linux terminal","text":"<p>How to connect to CCBL server</p> <p>The first step to connect to the server is to open the linux terminal or the command prompt in windows. Just press <code>ctrl+al+t</code> to open linux terminal or search for \u201ccmd\u201d on windows toolbar. Once the black is screen open, use the SSH protocol (Secure Shell) to connect to the remote server:</p> <pre><code>ssh user@seriema.fcfrp.usp.br \n\n</code></pre> <p></p> <p>Then type your password and press enter.</p> <p>On the server use the <code>top</code> command to see a list of running processes.</p> <pre><code>top\n</code></pre> <p></p> <p>zombie processes</p> <p>Now you can see who is online and the process ID (pid) running. Sometimes a few remain open even after the task is done, so it is necessary to close them to avoid RAM overuse. To find the zombies press <code>ctrl+c</code> to exit top and type the following combination of commands on terminal:</p> <pre><code>ps aux | grep Z\n</code></pre> <p>It returns a list of processes that you must kill</p> <p></p> <p>Then type the <code>kill</code> command followed by the <code>process id (pid)</code> you want to terminate:</p> <pre><code>kill -s SIGCHLD pid\n</code></pre> <p>That's it. You have killed the zombies.</p>"}]}